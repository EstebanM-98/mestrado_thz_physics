import thz
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.signal import savgol_filter, get_window
from scipy.fft import fft, fftfreq, ifft

def epsilon(freq, tc, d, n2):
    ''' This function is used to compute the permittivity '''
    A = 1j * ( n2 + 1 )
    B = ( 1 / tc ) - 1
    C = .3 / 2 / np.pi / freq / d
    return A * B * C - n2

plt.style.use(r"C:\Users\nickm\Dropbox\mplstyles\clinopaper.mplstyle")


raw_data = pd.read_csv('data/pbte.csv', usecols=['ref', '120', '10'])[200:].reset_index(drop=True)
raw_time = raw_data.index.to_numpy()

alig, di = thz.align_data(raw_data, 'ref')
cent = thz.center_data(alig, 'ref')

plt.figure()
plt.plot(cent['ref'], 'k-')
plt.plot(cent['120'] * 10 + 2, '-', c='tab:orange')
plt.plot(cent['10'] * 20 + 3.5, '-', c='tab:blue')

plt.plot(get_window(('gaussian', 100), len(cent)))
plt.plot(get_window('flattop', len(cent)))
plt.plot(get_window('barthann', len(cent)))
plt.plot(get_window('hann', len(cent)))


#%%
plt.figure()

wf = cent['10']*20

plt.plot(wf)
plt.plot(wf * get_window(('gaussian', 100), len(cent)) -1)
plt.plot(wf * get_window(('flattop'), len(cent)) - 2)
cut = 1
plt.plot(wf[cut:-cut] * get_window('blackmanharris', len(cent)-(2*cut)) - 3)
cut = 1
plt.plot(wf[cut:-cut] * get_window('barthann', len(cent)-(2*cut)) - 4)


  #%%

spec_ret = thz.compute_fft(cent.iloc[:-300], 2**14, 1/30, di, [.1, 1.5], 'boxcar')
spec_gau = thz.compute_fft(cent, 2**14, 1/30, di, [.1, 1.5], ('gaussian', 100))
spec_flt = thz.compute_fft(cent, 2**14, 1/30, di, [.1, 1.5], 'flattop')
spec_han = thz.compute_fft(cent[120:-120], 2**14, 1/30, di, [.1, 1.5], 'blackmanharris')
spec_bhn = thz.compute_fft(cent[200:-200], 2**14, 1/30, di, [.1, 1.5], 'barthann')

freq = spec_ret.index.to_numpy()

tc_ret = pd.DataFrame({k: spec_ret[k] / spec_ret['ref'] for k in [spec_ret] if k != 'ref'}).apply(lambda x: x np.exp(2j*np.pi*freq*(1-2.6)*0.1/.3))
tc_gau = pd.DataFrame({k: spec_gau[k] / spec_gau['ref'] for k in [spec_gau] if k != 'ref'}).apply(lambda x: x np.exp(2j*np.pi*freq*(1-2.6)*0.1/.3))
tc_flt = pd.DataFrame({k: spec_flt[k] / spec_flt['ref'] for k in [spec_flt] if k != 'ref'}).apply(lambda x: x np.exp(2j*np.pi*freq*(1-2.6)*0.1/.3))
tc_han = pd.DataFrame({k: spec_han[k] / spec_han['ref'] for k in [spec_han] if k != 'ref'}).apply(lambda x: x np.exp(2j*np.pi*freq*(1-2.6)*0.1/.3))
tc_bhn = pd.DataFrame({k: spec_bhn[k] / spec_bhn['ref'] for k in [spec_bhn] if k != 'ref'}).apply(lambda x: x np.exp(2j*np.pi*freq*(1-2.6)*0.1/.3))


plt.figure()
plt.plot(tc_ret['10'].abs()**2, 'tab:blue', label='retangular')
plt.plot(tc_ret['120'].abs()**2, 'tab:blue')
plt.plot(tc_gau['10'].abs()**2, 'tab:orange', label='gaussian')
plt.plot(tc_gau['120'].abs()**2, 'tab:orange')
plt.plot(tc_flt['10'].abs()**2, 'tab:green', label='flattop')
plt.plot(tc_flt['120'].abs()**2, 'tab:green')
plt.plot(tc_han['10'].abs()**2, 'tab:red', label='blackmann-harris')
plt.plot(tc_han['120'].abs()**2, 'tab:red')
plt.plot(tc_bhn['10'].abs()**2, 'tab:purple', label='barthann')
plt.plot(tc_bhn['120'].abs()**2, 'tab:purple')

plt.yscale('log')
plt.legend()

#%%

eps_ret = pd.DataFrame({k: epsilon(freq, tc_ret[k], 1.6e-3, 2.6) for k in [*tc_ret]})
eps_gau = pd.DataFrame({k: epsilon(freq, tc_gau[k], 1.6e-3, 2.6) for k in [*tc_gau]})
eps_flt = pd.DataFrame({k: epsilon(freq, tc_flt[k], 1.6e-3, 2.6) for k in [*tc_flt]})
eps_han = pd.DataFrame({k: epsilon(freq, tc_han[k], 1.6e-3, 2.6) for k in [*tc_han]})
eps_bhn = pd.DataFrame({k: epsilon(freq, tc_bhn[k], 1.6e-3, 2.6) for k in [*tc_bhn]})

fig, (ax1, ax2) = plt.subplots(1, 2)

#ax1.plot(eps_ret['120'].apply(np.real), 'tab:blue')
ax1.plot(eps_gau['10'].apply(np.real), 'tab:orange', label='gaussian')
ax1.plot(eps_flt['10'].apply(np.real), 'tab:green', label='flattop')
ax1.plot(eps_han['10'].apply(np.real), 'tab:red', label='b-harris')
ax1.plot(eps_bhn['10'].apply(np.real), 'tab:purple', label='barthann')
#ax1.set_xlim(.3, .9)
ax1.legend()

ax2.plot(eps_gau['10'].apply(np.imag), 'tab:orange')
ax2.plot(eps_flt['10'].apply(np.imag), 'tab:green')
ax2.plot(eps_han['10'].apply(np.imag), 'tab:red')
ax2.plot(eps_bhn['10'].apply(np.imag), 'tab:purple')
#ax2.set_xlim(.3, .9)

axi2 = ax2.inset_axes([.5, .2, .4, .7])
axi2.plot(eps_gau['10'].apply(np.imag).loc[.5:.55]/1e4, 'tab:orange')
axi2.plot(eps_flt['10'].apply(np.imag).loc[.5:.55]/1e4, 'tab:green')
axi2.plot(eps_han['10'].apply(np.imag).loc[.5:.55]/1e4, 'tab:red')
axi2.plot(eps_bhn['10'].apply(np.imag).loc[.5:.55]/1e4, 'tab:purple')


 #%%
fig, (ax1, ax2) = plt.subplots(1, 2)

ax1.plot(eps_ret['120'].apply(np.real), 'tab:blue', label='retangular')
ax1.plot(eps_gau['120'].apply(np.real), 'tab:orange', label='gaussian')
ax1.plot(eps_flt['120'].apply(np.real), 'tab:green', label='flattop')
ax1.plot(eps_han['120'].apply(np.real), 'tab:red', label='b-harris')
ax1.plot(eps_bhn['120'].apply(np.real), 'tab:purple', label='barthann')

ax1.legend()

ax2.plot(eps_ret['120'].apply(np.imag), 'tab:blue')
ax2.plot(eps_gau['120'].apply(np.imag), 'tab:orange')
ax2.plot(eps_flt['120'].apply(np.imag), 'tab:green')
ax2.plot(eps_han['120'].apply(np.imag), 'tab:red')
ax2.plot(eps_bhn['120'].apply(np.imag), 'tab:purple')
ax2.set_xlim(.1, 2.5)

axi2 = ax2.inset_axes([.5, .2, .4, .7])
axi2.plot(eps_ret['120'].apply(np.imag).loc[.68:.78]/1e3, 'tab:blue')
axi2.plot(eps_gau['120'].apply(np.imag).loc[.68:.78]/1e3, 'tab:orange')
axi2.plot(eps_flt['120'].apply(np.imag).loc[.68:.78]/1e3, 'tab:green')
axi2.plot(eps_han['120'].apply(np.imag).loc[.68:.78]/1e3, 'tab:red')
axi2.plot(eps_bhn['120'].apply(np.imag).loc[.68:.78]/1e3,Â 'tab:purple'